datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id           String    @id @unique @default(cuid())
  email        String    @unique
  userName     String    @unique
  creationDate DateTime  @default(now())
  profile      Profile?  @relation(fields: [profilesId], references: [id])
  myFolder     Folder?
  articles     Article[]
  friends      Friend?   @relation(fields: [friendsId], references: [id])
  profilesId   String?
  friendsId    String?
}

model Profile {
  id       String    @id @unique @default(cuid())
  story    String?
  birthday DateTime?
  Album    Album[]
  User     User[]
}

model Album {
  id        String    @id @unique @default(cuid())
  creation  DateTime?
  update    DateTime? @updatedAt
  photos    Photo[]
  Profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId String?
}

model Photo {
  id       String   @id @unique @default(cuid())
  fileName String
  uploadOn DateTime
  album    Album?   @relation(fields: [albumId], references: [id])
  Url      String?
  albumId  String?
  Chat     Chat[]
}

model Chat {
  id         String        @id @unique @default(cuid())
  text       ChatMessage[]
  creation   DateTime      @default(now())
  updadeOn   DateTime?     @updatedAt
  chatRoom   ChatRoom      @relation(fields: [chatRoomId], references: [id])
  photo      Photo?        @relation(fields: [photoId], references: [id])
  chatRoomId String
  photoId    String?
}

model ChatRoom {
  id               String        @id @unique @default(cuid())
  chatRoomName     String        @unique
  lastActivity     DateTime      @updatedAt
  creation         DateTime      @default(now())
  chatRoomMessages ChatMessage[]
  Chats            Chat[]
}

model ChatMessage {
  id         String    @id @unique @default(cuid())
  chats      Chat?     @relation(fields: [chatId], references: [id])
  creation   DateTime  @default(now())
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId String?
  chatId     String?
}

model File {
  id       String  @id @unique @default(cuid())
  fileName String
  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId String?
}

model Folder {
  id         String    @id @unique @default(cuid())
  owner      User      @relation(fields: [userId], references: [id])
  folderName String
  files      File[]
  pathUrl    String
  creation   DateTime? @default(now())
  userId     String    @unique
}

model Article {
  id       String    @id @unique @default(cuid())
  title    String
  creation DateTime
  updateOn DateTime? @updatedAt
  body     String?
  tags     Tag[]
  author   User      @relation(fields: [userId], references: [id])
  userId   String
  idTag    String[]
}

model Tag {
  id       String    @id @unique @default(cuid())
  name     String?
  articles Article[]
}

model Friend {
  id     String @id @unique @default(cuid())
  friends User[]
}
